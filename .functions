# Create a new directory and enter it
mkd() {
    mkdir -p "$@" && cd "$_";
}

# Change working directory to the top-most Finder window location
cdf() {
    cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')";
}

# Extract archives
extract() {
    if [ -f "$1" ] ; then
        case "$1" in
            *.tar.bz2)   tar xjf "$1"     ;;
            *.tar.gz)    tar xzf "$1"     ;;
            *.bz2)       bunzip2 "$1"     ;;
            *.rar)       unrar e "$1"     ;;
            *.gz)        gunzip "$1"      ;;
            *.tar)       tar xf "$1"      ;;
            *.tbz2)      tar xjf "$1"     ;;
            *.tgz)       tar xzf "$1"     ;;
            *.zip)       unzip "$1"       ;;
            *.Z)         uncompress "$1"  ;;
            *.7z)        7z x "$1"        ;;
            *)     echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# Find files by name
ff() {
    find . -type f -iname "*$1*" 2>/dev/null
}

# Find directories by name
fd() {
    find . -type d -iname "*$1*" 2>/dev/null
}

# Get gzipped file size
gz() {
    echo "orig size    (bytes): "
    cat "$1" | wc -c
    echo "gzipped size (bytes): "
    gzip -c "$1" | wc -c
}

# Simple calculator
calc() {
    local result=""
    result="$(printf "scale=10;$*\n" | bc --mathlib | tr -d '\\\n')"
    if [[ "$result" == *.* ]]; then
        printf "$result" |
        sed -e 's/^\./0./'        \
            -e 's/^-\./-0./'      \
            -e 's/0*$//;s/\.$//';
    else
        printf "$result";
    fi;
    printf "\n";
}

# Get HTTP status code
httpstatus() {
    curl -o /dev/null -s -w "%{http_code}\n" "$1"
}

# Docker cleanup
docker-cleanup() {
    docker system prune -a --volumes
}

# Kubernetes context switcher
kctx() {
    if [ $# -eq 0 ]; then
        kubectl config get-contexts
    else
        kubectl config use-context "$1"
    fi
}

# Kubernetes namespace switcher
kns() {
    if [ $# -eq 0 ]; then
        kubectl get namespaces
    else
        kubectl config set-context --current --namespace="$1"
    fi
}

# Port check
port() {
    lsof -n -i4TCP:"$1" | grep LISTEN
}

# JSON pretty print
json() {
    if [ -t 0 ]; then
        python -mjson.tool <<< "$*" | pygmentize -l javascript
    else
        python -mjson.tool | pygmentize -l javascript
    fi
}

# Generate random password
genpass() {
    local length=${1:-16}
    openssl rand -base64 $length
}

# Get external IP
myip() {
    curl -s http://checkip.dyndns.org/ | grep -o "[0-9.]*"
}

# Local IP addresses
localip() {
    ifconfig | grep "inet " | grep -v 127.0.0.1 | awk '{print $2}'
}

# Show PATH in readable format
path() {
    echo $PATH | tr ':' '\n'
}

# Back navigation
..() { cd ..; }
...() { cd ../..; }
....() { cd ../../..; }

# System information
sysinfo() {
    echo "System: $(uname -a)"
    echo "Uptime: $(uptime)"
    echo "Memory: $(free -h 2>/dev/null || vm_stat)"
    echo "Disk: $(df -h . | tail -1)"
}
